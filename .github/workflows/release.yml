name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Run build
        run: npm run build
        
      - name: Check package version
        if: github.event_name == 'push'
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "Package version ($PACKAGE_VERSION) does not match tag version ($TAG_VERSION)"
            exit 1
          fi
          
  release:
    name: Create Release
    needs: validate
    runs-on: ubuntu-latest
    
    outputs:
      release-url: ${{ steps.create-release.outputs.html_url }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build library
        run: npm run build
        
      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, using first commit"
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          # Generate changelog
          echo "## What's Changed" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get commit messages
          git log ${PREV_TAG}..HEAD --pretty=format:"* %s by @%an" >> CHANGELOG.md
          
          echo "" >> CHANGELOG.md
          echo "## Contributors" >> CHANGELOG.md
          git log ${PREV_TAG}..HEAD --pretty=format:"* @%an" | sort -u >> CHANGELOG.md
          
      - name: Create GitHub Release
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(github.ref, '-beta') || contains(github.ref, '-alpha') || contains(github.ref, '-rc') }}
          generate_release_notes: true
          files: |
            dist/**/*
            
  publish-npm:
    name: Publish to npm
    needs: release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build library
        run: npm run build
        
      - name: Configure npm authentication
        run: echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Publish to npm
        run: |
          # Check if this is a prerelease
          if [[ "${{ github.ref }}" == *"-beta"* ]]; then
            npm publish --access public --tag beta
          elif [[ "${{ github.ref }}" == *"-alpha"* ]]; then
            npm publish --access public --tag alpha
          elif [[ "${{ github.ref }}" == *"-rc"* ]]; then
            npm publish --access public --tag rc
          else
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
  publish-github:
    name: Publish to GitHub Packages
    needs: release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: 'https://npm.pkg.github.com'
          scope: '@sgnl-ai'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build library
        run: npm run build
        
      - name: Configure package for GitHub registry
        run: |
          # Update package.json to point to GitHub registry
          node -e "
          const pkg = require('./package.json');
          pkg.publishConfig = {
            registry: 'https://npm.pkg.github.com'
          };
          require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "
          
      - name: Publish to GitHub Packages
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  notification:
    name: Release Notification
    needs: [release, publish-npm]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Send success notification
        run: |
          echo "ðŸŽ‰ Release successful!"
          echo "Release URL: ${{ needs.release.outputs.release-url }}"
          echo "Package published to npm: https://www.npmjs.com/package/@sgnl-ai/set-transmitter"